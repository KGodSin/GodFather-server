// Code generated by entc, DO NOT EDIT.

package ent

import (
	"GodFather-server/ent/product_order"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Product_order is the model entity for the Product_order schema.
type Product_order struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// Count holds the value of the "count" field.
	Count int `json:"count,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// RegisteredAt holds the value of the "registered_at" field.
	RegisteredAt           time.Time `json:"registered_at,omitempty"`
	product_product_orders *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product_order) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case product_order.FieldID, product_order.FieldPrice, product_order.FieldCount:
			values[i] = &sql.NullInt64{}
		case product_order.FieldName:
			values[i] = &sql.NullString{}
		case product_order.FieldStartDate, product_order.FieldEndDate, product_order.FieldRegisteredAt:
			values[i] = &sql.NullTime{}
		case product_order.ForeignKeys[0]: // product_product_orders
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Product_order", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product_order fields.
func (po *Product_order) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product_order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case product_order.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				po.Name = value.String
			}
		case product_order.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				po.Price = int(value.Int64)
			}
		case product_order.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				po.Count = int(value.Int64)
			}
		case product_order.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				po.StartDate = value.Time
			}
		case product_order.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				po.EndDate = value.Time
			}
		case product_order.FieldRegisteredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field registered_at", values[i])
			} else if value.Valid {
				po.RegisteredAt = value.Time
			}
		case product_order.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_product_orders", value)
			} else if value.Valid {
				po.product_product_orders = new(int)
				*po.product_product_orders = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Product_order.
// Note that you need to call Product_order.Unwrap() before calling this method if this Product_order
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Product_order) Update() *ProductOrderUpdateOne {
	return (&Product_orderClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Product_order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Product_order) Unwrap() *Product_order {
	tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product_order is not a transactional entity")
	}
	po.config.driver = tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Product_order) String() string {
	var builder strings.Builder
	builder.WriteString("Product_order(")
	builder.WriteString(fmt.Sprintf("id=%v", po.ID))
	builder.WriteString(", name=")
	builder.WriteString(po.Name)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", po.Price))
	builder.WriteString(", count=")
	builder.WriteString(fmt.Sprintf("%v", po.Count))
	builder.WriteString(", start_date=")
	builder.WriteString(po.StartDate.Format(time.ANSIC))
	builder.WriteString(", end_date=")
	builder.WriteString(po.EndDate.Format(time.ANSIC))
	builder.WriteString(", registered_at=")
	builder.WriteString(po.RegisteredAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Product_orders is a parsable slice of Product_order.
type Product_orders []*Product_order

func (po Product_orders) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
