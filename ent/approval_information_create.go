// Code generated by entc, DO NOT EDIT.

package ent

import (
	"GodFather-server/ent/approval_information"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApprovalInformationCreate is the builder for creating a Approval_information entity.
type ApprovalInformationCreate struct {
	config
	mutation *ApprovalInformationMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (aic *ApprovalInformationCreate) SetStatus(ai approval_information.Status) *ApprovalInformationCreate {
	aic.mutation.SetStatus(ai)
	return aic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aic *ApprovalInformationCreate) SetNillableStatus(ai *approval_information.Status) *ApprovalInformationCreate {
	if ai != nil {
		aic.SetStatus(*ai)
	}
	return aic
}

// SetApprovalDate sets the "approval_date" field.
func (aic *ApprovalInformationCreate) SetApprovalDate(t time.Time) *ApprovalInformationCreate {
	aic.mutation.SetApprovalDate(t)
	return aic
}

// SetCount sets the "count" field.
func (aic *ApprovalInformationCreate) SetCount(i int) *ApprovalInformationCreate {
	aic.mutation.SetCount(i)
	return aic
}

// SetUserID sets the "user_id" field.
func (aic *ApprovalInformationCreate) SetUserID(s string) *ApprovalInformationCreate {
	aic.mutation.SetUserID(s)
	return aic
}

// SetProductID sets the "product_id" field.
func (aic *ApprovalInformationCreate) SetProductID(s string) *ApprovalInformationCreate {
	aic.mutation.SetProductID(s)
	return aic
}

// SetRegisteredAt sets the "registered_at" field.
func (aic *ApprovalInformationCreate) SetRegisteredAt(t time.Time) *ApprovalInformationCreate {
	aic.mutation.SetRegisteredAt(t)
	return aic
}

// SetNillableRegisteredAt sets the "registered_at" field if the given value is not nil.
func (aic *ApprovalInformationCreate) SetNillableRegisteredAt(t *time.Time) *ApprovalInformationCreate {
	if t != nil {
		aic.SetRegisteredAt(*t)
	}
	return aic
}

// Mutation returns the ApprovalInformationMutation object of the builder.
func (aic *ApprovalInformationCreate) Mutation() *ApprovalInformationMutation {
	return aic.mutation
}

// Save creates the Approval_information in the database.
func (aic *ApprovalInformationCreate) Save(ctx context.Context) (*Approval_information, error) {
	var (
		err  error
		node *Approval_information
	)
	aic.defaults()
	if len(aic.hooks) == 0 {
		if err = aic.check(); err != nil {
			return nil, err
		}
		node, err = aic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApprovalInformationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aic.check(); err != nil {
				return nil, err
			}
			aic.mutation = mutation
			node, err = aic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aic.hooks) - 1; i >= 0; i-- {
			mut = aic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aic *ApprovalInformationCreate) SaveX(ctx context.Context) *Approval_information {
	v, err := aic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (aic *ApprovalInformationCreate) defaults() {
	if _, ok := aic.mutation.Status(); !ok {
		v := approval_information.DefaultStatus
		aic.mutation.SetStatus(v)
	}
	if _, ok := aic.mutation.RegisteredAt(); !ok {
		v := approval_information.DefaultRegisteredAt()
		aic.mutation.SetRegisteredAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aic *ApprovalInformationCreate) check() error {
	if _, ok := aic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if v, ok := aic.mutation.Status(); ok {
		if err := approval_information.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := aic.mutation.ApprovalDate(); !ok {
		return &ValidationError{Name: "approval_date", err: errors.New("ent: missing required field \"approval_date\"")}
	}
	if _, ok := aic.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New("ent: missing required field \"count\"")}
	}
	if _, ok := aic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New("ent: missing required field \"user_id\"")}
	}
	if _, ok := aic.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New("ent: missing required field \"product_id\"")}
	}
	if _, ok := aic.mutation.RegisteredAt(); !ok {
		return &ValidationError{Name: "registered_at", err: errors.New("ent: missing required field \"registered_at\"")}
	}
	return nil
}

func (aic *ApprovalInformationCreate) sqlSave(ctx context.Context) (*Approval_information, error) {
	_node, _spec := aic.createSpec()
	if err := sqlgraph.CreateNode(ctx, aic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (aic *ApprovalInformationCreate) createSpec() (*Approval_information, *sqlgraph.CreateSpec) {
	var (
		_node = &Approval_information{config: aic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: approval_information.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: approval_information.FieldID,
			},
		}
	)
	if value, ok := aic.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: approval_information.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := aic.mutation.ApprovalDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: approval_information.FieldApprovalDate,
		})
		_node.ApprovalDate = value
	}
	if value, ok := aic.mutation.Count(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: approval_information.FieldCount,
		})
		_node.Count = value
	}
	if value, ok := aic.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approval_information.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := aic.mutation.ProductID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approval_information.FieldProductID,
		})
		_node.ProductID = value
	}
	if value, ok := aic.mutation.RegisteredAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: approval_information.FieldRegisteredAt,
		})
		_node.RegisteredAt = value
	}
	return _node, _spec
}

// ApprovalInformationCreateBulk is the builder for creating many Approval_information entities in bulk.
type ApprovalInformationCreateBulk struct {
	config
	builders []*ApprovalInformationCreate
}

// Save creates the Approval_information entities in the database.
func (aicb *ApprovalInformationCreateBulk) Save(ctx context.Context) ([]*Approval_information, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aicb.builders))
	nodes := make([]*Approval_information, len(aicb.builders))
	mutators := make([]Mutator, len(aicb.builders))
	for i := range aicb.builders {
		func(i int, root context.Context) {
			builder := aicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApprovalInformationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aicb *ApprovalInformationCreateBulk) SaveX(ctx context.Context) []*Approval_information {
	v, err := aicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
