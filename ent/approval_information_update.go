// Code generated by entc, DO NOT EDIT.

package ent

import (
	"GodFather-server/ent/approval_information"
	"GodFather-server/ent/predicate"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApprovalInformationUpdate is the builder for updating Approval_information entities.
type ApprovalInformationUpdate struct {
	config
	hooks    []Hook
	mutation *ApprovalInformationMutation
}

// Where adds a new predicate for the ApprovalInformationUpdate builder.
func (aiu *ApprovalInformationUpdate) Where(ps ...predicate.Approval_information) *ApprovalInformationUpdate {
	aiu.mutation.predicates = append(aiu.mutation.predicates, ps...)
	return aiu
}

// SetStatus sets the "status" field.
func (aiu *ApprovalInformationUpdate) SetStatus(ai approval_information.Status) *ApprovalInformationUpdate {
	aiu.mutation.SetStatus(ai)
	return aiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aiu *ApprovalInformationUpdate) SetNillableStatus(ai *approval_information.Status) *ApprovalInformationUpdate {
	if ai != nil {
		aiu.SetStatus(*ai)
	}
	return aiu
}

// SetApprovalDate sets the "approval_date" field.
func (aiu *ApprovalInformationUpdate) SetApprovalDate(t time.Time) *ApprovalInformationUpdate {
	aiu.mutation.SetApprovalDate(t)
	return aiu
}

// SetCount sets the "count" field.
func (aiu *ApprovalInformationUpdate) SetCount(i int) *ApprovalInformationUpdate {
	aiu.mutation.ResetCount()
	aiu.mutation.SetCount(i)
	return aiu
}

// AddCount adds i to the "count" field.
func (aiu *ApprovalInformationUpdate) AddCount(i int) *ApprovalInformationUpdate {
	aiu.mutation.AddCount(i)
	return aiu
}

// SetUserID sets the "user_id" field.
func (aiu *ApprovalInformationUpdate) SetUserID(s string) *ApprovalInformationUpdate {
	aiu.mutation.SetUserID(s)
	return aiu
}

// SetProductID sets the "product_id" field.
func (aiu *ApprovalInformationUpdate) SetProductID(s string) *ApprovalInformationUpdate {
	aiu.mutation.SetProductID(s)
	return aiu
}

// SetRegisteredAt sets the "registered_at" field.
func (aiu *ApprovalInformationUpdate) SetRegisteredAt(t time.Time) *ApprovalInformationUpdate {
	aiu.mutation.SetRegisteredAt(t)
	return aiu
}

// SetNillableRegisteredAt sets the "registered_at" field if the given value is not nil.
func (aiu *ApprovalInformationUpdate) SetNillableRegisteredAt(t *time.Time) *ApprovalInformationUpdate {
	if t != nil {
		aiu.SetRegisteredAt(*t)
	}
	return aiu
}

// Mutation returns the ApprovalInformationMutation object of the builder.
func (aiu *ApprovalInformationUpdate) Mutation() *ApprovalInformationMutation {
	return aiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aiu *ApprovalInformationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aiu.hooks) == 0 {
		if err = aiu.check(); err != nil {
			return 0, err
		}
		affected, err = aiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApprovalInformationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aiu.check(); err != nil {
				return 0, err
			}
			aiu.mutation = mutation
			affected, err = aiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aiu.hooks) - 1; i >= 0; i-- {
			mut = aiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aiu *ApprovalInformationUpdate) SaveX(ctx context.Context) int {
	affected, err := aiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aiu *ApprovalInformationUpdate) Exec(ctx context.Context) error {
	_, err := aiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiu *ApprovalInformationUpdate) ExecX(ctx context.Context) {
	if err := aiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiu *ApprovalInformationUpdate) check() error {
	if v, ok := aiu.mutation.Status(); ok {
		if err := approval_information.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (aiu *ApprovalInformationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   approval_information.Table,
			Columns: approval_information.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: approval_information.FieldID,
			},
		},
	}
	if ps := aiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: approval_information.FieldStatus,
		})
	}
	if value, ok := aiu.mutation.ApprovalDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: approval_information.FieldApprovalDate,
		})
	}
	if value, ok := aiu.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: approval_information.FieldCount,
		})
	}
	if value, ok := aiu.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: approval_information.FieldCount,
		})
	}
	if value, ok := aiu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approval_information.FieldUserID,
		})
	}
	if value, ok := aiu.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approval_information.FieldProductID,
		})
	}
	if value, ok := aiu.mutation.RegisteredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: approval_information.FieldRegisteredAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approval_information.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ApprovalInformationUpdateOne is the builder for updating a single Approval_information entity.
type ApprovalInformationUpdateOne struct {
	config
	hooks    []Hook
	mutation *ApprovalInformationMutation
}

// SetStatus sets the "status" field.
func (aiuo *ApprovalInformationUpdateOne) SetStatus(ai approval_information.Status) *ApprovalInformationUpdateOne {
	aiuo.mutation.SetStatus(ai)
	return aiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aiuo *ApprovalInformationUpdateOne) SetNillableStatus(ai *approval_information.Status) *ApprovalInformationUpdateOne {
	if ai != nil {
		aiuo.SetStatus(*ai)
	}
	return aiuo
}

// SetApprovalDate sets the "approval_date" field.
func (aiuo *ApprovalInformationUpdateOne) SetApprovalDate(t time.Time) *ApprovalInformationUpdateOne {
	aiuo.mutation.SetApprovalDate(t)
	return aiuo
}

// SetCount sets the "count" field.
func (aiuo *ApprovalInformationUpdateOne) SetCount(i int) *ApprovalInformationUpdateOne {
	aiuo.mutation.ResetCount()
	aiuo.mutation.SetCount(i)
	return aiuo
}

// AddCount adds i to the "count" field.
func (aiuo *ApprovalInformationUpdateOne) AddCount(i int) *ApprovalInformationUpdateOne {
	aiuo.mutation.AddCount(i)
	return aiuo
}

// SetUserID sets the "user_id" field.
func (aiuo *ApprovalInformationUpdateOne) SetUserID(s string) *ApprovalInformationUpdateOne {
	aiuo.mutation.SetUserID(s)
	return aiuo
}

// SetProductID sets the "product_id" field.
func (aiuo *ApprovalInformationUpdateOne) SetProductID(s string) *ApprovalInformationUpdateOne {
	aiuo.mutation.SetProductID(s)
	return aiuo
}

// SetRegisteredAt sets the "registered_at" field.
func (aiuo *ApprovalInformationUpdateOne) SetRegisteredAt(t time.Time) *ApprovalInformationUpdateOne {
	aiuo.mutation.SetRegisteredAt(t)
	return aiuo
}

// SetNillableRegisteredAt sets the "registered_at" field if the given value is not nil.
func (aiuo *ApprovalInformationUpdateOne) SetNillableRegisteredAt(t *time.Time) *ApprovalInformationUpdateOne {
	if t != nil {
		aiuo.SetRegisteredAt(*t)
	}
	return aiuo
}

// Mutation returns the ApprovalInformationMutation object of the builder.
func (aiuo *ApprovalInformationUpdateOne) Mutation() *ApprovalInformationMutation {
	return aiuo.mutation
}

// Save executes the query and returns the updated Approval_information entity.
func (aiuo *ApprovalInformationUpdateOne) Save(ctx context.Context) (*Approval_information, error) {
	var (
		err  error
		node *Approval_information
	)
	if len(aiuo.hooks) == 0 {
		if err = aiuo.check(); err != nil {
			return nil, err
		}
		node, err = aiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApprovalInformationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aiuo.check(); err != nil {
				return nil, err
			}
			aiuo.mutation = mutation
			node, err = aiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aiuo.hooks) - 1; i >= 0; i-- {
			mut = aiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aiuo *ApprovalInformationUpdateOne) SaveX(ctx context.Context) *Approval_information {
	node, err := aiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiuo *ApprovalInformationUpdateOne) Exec(ctx context.Context) error {
	_, err := aiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiuo *ApprovalInformationUpdateOne) ExecX(ctx context.Context) {
	if err := aiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiuo *ApprovalInformationUpdateOne) check() error {
	if v, ok := aiuo.mutation.Status(); ok {
		if err := approval_information.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (aiuo *ApprovalInformationUpdateOne) sqlSave(ctx context.Context) (_node *Approval_information, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   approval_information.Table,
			Columns: approval_information.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: approval_information.FieldID,
			},
		},
	}
	id, ok := aiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Approval_information.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := aiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: approval_information.FieldStatus,
		})
	}
	if value, ok := aiuo.mutation.ApprovalDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: approval_information.FieldApprovalDate,
		})
	}
	if value, ok := aiuo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: approval_information.FieldCount,
		})
	}
	if value, ok := aiuo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: approval_information.FieldCount,
		})
	}
	if value, ok := aiuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approval_information.FieldUserID,
		})
	}
	if value, ok := aiuo.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approval_information.FieldProductID,
		})
	}
	if value, ok := aiuo.mutation.RegisteredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: approval_information.FieldRegisteredAt,
		})
	}
	_node = &Approval_information{config: aiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approval_information.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
