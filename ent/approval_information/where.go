// Code generated by entc, DO NOT EDIT.

package approval_information

import (
	"GodFather-server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ApprovalDate applies equality check predicate on the "approval_date" field. It's identical to ApprovalDateEQ.
func ApprovalDate(v time.Time) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApprovalDate), v))
	})
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCount), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// RegisteredAt applies equality check predicate on the "registered_at" field. It's identical to RegisteredAtEQ.
func RegisteredAt(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisteredAt), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Approval_information {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Approval_information(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Approval_information {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Approval_information(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// ApprovalDateEQ applies the EQ predicate on the "approval_date" field.
func ApprovalDateEQ(v time.Time) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApprovalDate), v))
	})
}

// ApprovalDateNEQ applies the NEQ predicate on the "approval_date" field.
func ApprovalDateNEQ(v time.Time) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldApprovalDate), v))
	})
}

// ApprovalDateIn applies the In predicate on the "approval_date" field.
func ApprovalDateIn(vs ...time.Time) predicate.Approval_information {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Approval_information(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldApprovalDate), v...))
	})
}

// ApprovalDateNotIn applies the NotIn predicate on the "approval_date" field.
func ApprovalDateNotIn(vs ...time.Time) predicate.Approval_information {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Approval_information(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldApprovalDate), v...))
	})
}

// ApprovalDateGT applies the GT predicate on the "approval_date" field.
func ApprovalDateGT(v time.Time) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldApprovalDate), v))
	})
}

// ApprovalDateGTE applies the GTE predicate on the "approval_date" field.
func ApprovalDateGTE(v time.Time) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldApprovalDate), v))
	})
}

// ApprovalDateLT applies the LT predicate on the "approval_date" field.
func ApprovalDateLT(v time.Time) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldApprovalDate), v))
	})
}

// ApprovalDateLTE applies the LTE predicate on the "approval_date" field.
func ApprovalDateLTE(v time.Time) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldApprovalDate), v))
	})
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCount), v))
	})
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCount), v))
	})
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int) predicate.Approval_information {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Approval_information(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCount), v...))
	})
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int) predicate.Approval_information {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Approval_information(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCount), v...))
	})
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCount), v))
	})
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCount), v))
	})
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCount), v))
	})
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCount), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Approval_information {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Approval_information(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Approval_information {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Approval_information(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserID), v))
	})
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserID), v))
	})
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserID), v))
	})
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserID), v))
	})
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserID), v))
	})
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductID), v))
	})
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...string) predicate.Approval_information {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Approval_information(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductID), v...))
	})
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...string) predicate.Approval_information {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Approval_information(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductID), v...))
	})
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductID), v))
	})
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductID), v))
	})
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductID), v))
	})
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductID), v))
	})
}

// ProductIDContains applies the Contains predicate on the "product_id" field.
func ProductIDContains(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductID), v))
	})
}

// ProductIDHasPrefix applies the HasPrefix predicate on the "product_id" field.
func ProductIDHasPrefix(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductID), v))
	})
}

// ProductIDHasSuffix applies the HasSuffix predicate on the "product_id" field.
func ProductIDHasSuffix(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductID), v))
	})
}

// ProductIDEqualFold applies the EqualFold predicate on the "product_id" field.
func ProductIDEqualFold(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductID), v))
	})
}

// ProductIDContainsFold applies the ContainsFold predicate on the "product_id" field.
func ProductIDContainsFold(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductID), v))
	})
}

// RegisteredAtEQ applies the EQ predicate on the "registered_at" field.
func RegisteredAtEQ(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisteredAt), v))
	})
}

// RegisteredAtNEQ applies the NEQ predicate on the "registered_at" field.
func RegisteredAtNEQ(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegisteredAt), v))
	})
}

// RegisteredAtIn applies the In predicate on the "registered_at" field.
func RegisteredAtIn(vs ...string) predicate.Approval_information {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Approval_information(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegisteredAt), v...))
	})
}

// RegisteredAtNotIn applies the NotIn predicate on the "registered_at" field.
func RegisteredAtNotIn(vs ...string) predicate.Approval_information {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Approval_information(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegisteredAt), v...))
	})
}

// RegisteredAtGT applies the GT predicate on the "registered_at" field.
func RegisteredAtGT(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegisteredAt), v))
	})
}

// RegisteredAtGTE applies the GTE predicate on the "registered_at" field.
func RegisteredAtGTE(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegisteredAt), v))
	})
}

// RegisteredAtLT applies the LT predicate on the "registered_at" field.
func RegisteredAtLT(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegisteredAt), v))
	})
}

// RegisteredAtLTE applies the LTE predicate on the "registered_at" field.
func RegisteredAtLTE(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegisteredAt), v))
	})
}

// RegisteredAtContains applies the Contains predicate on the "registered_at" field.
func RegisteredAtContains(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegisteredAt), v))
	})
}

// RegisteredAtHasPrefix applies the HasPrefix predicate on the "registered_at" field.
func RegisteredAtHasPrefix(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegisteredAt), v))
	})
}

// RegisteredAtHasSuffix applies the HasSuffix predicate on the "registered_at" field.
func RegisteredAtHasSuffix(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegisteredAt), v))
	})
}

// RegisteredAtEqualFold applies the EqualFold predicate on the "registered_at" field.
func RegisteredAtEqualFold(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegisteredAt), v))
	})
}

// RegisteredAtContainsFold applies the ContainsFold predicate on the "registered_at" field.
func RegisteredAtContainsFold(v string) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegisteredAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Approval_information) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Approval_information) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Approval_information) predicate.Approval_information {
	return predicate.Approval_information(func(s *sql.Selector) {
		p(s.Not())
	})
}
