// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"GodFather-server/ent/migrate"

	"GodFather-server/ent/approval_information"
	"GodFather-server/ent/product"
	"GodFather-server/ent/product_order"
	"GodFather-server/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Approval_information is the client for interacting with the Approval_information builders.
	Approval_information *Approval_informationClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// Product_order is the client for interacting with the Product_order builders.
	Product_order *Product_orderClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Approval_information = NewApproval_informationClient(c.config)
	c.Product = NewProductClient(c.config)
	c.Product_order = NewProduct_orderClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Approval_information: NewApproval_informationClient(cfg),
		Product:              NewProductClient(cfg),
		Product_order:        NewProduct_orderClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:               cfg,
		Approval_information: NewApproval_informationClient(cfg),
		Product:              NewProductClient(cfg),
		Product_order:        NewProduct_orderClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Approval_information.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Approval_information.Use(hooks...)
	c.Product.Use(hooks...)
	c.Product_order.Use(hooks...)
	c.User.Use(hooks...)
}

// Approval_informationClient is a client for the Approval_information schema.
type Approval_informationClient struct {
	config
}

// NewApproval_informationClient returns a client for the Approval_information from the given config.
func NewApproval_informationClient(c config) *Approval_informationClient {
	return &Approval_informationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `approval_information.Hooks(f(g(h())))`.
func (c *Approval_informationClient) Use(hooks ...Hook) {
	c.hooks.Approval_information = append(c.hooks.Approval_information, hooks...)
}

// Create returns a create builder for Approval_information.
func (c *Approval_informationClient) Create() *ApprovalInformationCreate {
	mutation := newApprovalInformationMutation(c.config, OpCreate)
	return &ApprovalInformationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Approval_information entities.
func (c *Approval_informationClient) CreateBulk(builders ...*ApprovalInformationCreate) *ApprovalInformationCreateBulk {
	return &ApprovalInformationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Approval_information.
func (c *Approval_informationClient) Update() *ApprovalInformationUpdate {
	mutation := newApprovalInformationMutation(c.config, OpUpdate)
	return &ApprovalInformationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Approval_informationClient) UpdateOne(ai *Approval_information) *ApprovalInformationUpdateOne {
	mutation := newApprovalInformationMutation(c.config, OpUpdateOne, withApproval_information(ai))
	return &ApprovalInformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Approval_informationClient) UpdateOneID(id int) *ApprovalInformationUpdateOne {
	mutation := newApprovalInformationMutation(c.config, OpUpdateOne, withApproval_informationID(id))
	return &ApprovalInformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Approval_information.
func (c *Approval_informationClient) Delete() *ApprovalInformationDelete {
	mutation := newApprovalInformationMutation(c.config, OpDelete)
	return &ApprovalInformationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *Approval_informationClient) DeleteOne(ai *Approval_information) *ApprovalInformationDeleteOne {
	return c.DeleteOneID(ai.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *Approval_informationClient) DeleteOneID(id int) *ApprovalInformationDeleteOne {
	builder := c.Delete().Where(approval_information.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApprovalInformationDeleteOne{builder}
}

// Query returns a query builder for Approval_information.
func (c *Approval_informationClient) Query() *ApprovalInformationQuery {
	return &ApprovalInformationQuery{config: c.config}
}

// Get returns a Approval_information entity by its id.
func (c *Approval_informationClient) Get(ctx context.Context, id int) (*Approval_information, error) {
	return c.Query().Where(approval_information.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Approval_informationClient) GetX(ctx context.Context, id int) *Approval_information {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *Approval_informationClient) Hooks() []Hook {
	return c.hooks.Approval_information
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Create returns a create builder for Product.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{config: c.config}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProductOrders queries the product_orders edge of a Product.
func (c *ProductClient) QueryProductOrders(pr *Product) *ProductOrderQuery {
	query := &ProductOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(product_order.Table, product_order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ProductOrdersTable, product.ProductOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApprovalInformations queries the approval_informations edge of a Product.
func (c *ProductClient) QueryApprovalInformations(pr *Product) *ApprovalInformationQuery {
	query := &ApprovalInformationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(approval_information.Table, approval_information.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ApprovalInformationsTable, product.ApprovalInformationsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// Product_orderClient is a client for the Product_order schema.
type Product_orderClient struct {
	config
}

// NewProduct_orderClient returns a client for the Product_order from the given config.
func NewProduct_orderClient(c config) *Product_orderClient {
	return &Product_orderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product_order.Hooks(f(g(h())))`.
func (c *Product_orderClient) Use(hooks ...Hook) {
	c.hooks.Product_order = append(c.hooks.Product_order, hooks...)
}

// Create returns a create builder for Product_order.
func (c *Product_orderClient) Create() *ProductOrderCreate {
	mutation := newProductOrderMutation(c.config, OpCreate)
	return &ProductOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product_order entities.
func (c *Product_orderClient) CreateBulk(builders ...*ProductOrderCreate) *ProductOrderCreateBulk {
	return &ProductOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product_order.
func (c *Product_orderClient) Update() *ProductOrderUpdate {
	mutation := newProductOrderMutation(c.config, OpUpdate)
	return &ProductOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Product_orderClient) UpdateOne(po *Product_order) *ProductOrderUpdateOne {
	mutation := newProductOrderMutation(c.config, OpUpdateOne, withProduct_order(po))
	return &ProductOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Product_orderClient) UpdateOneID(id int) *ProductOrderUpdateOne {
	mutation := newProductOrderMutation(c.config, OpUpdateOne, withProduct_orderID(id))
	return &ProductOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product_order.
func (c *Product_orderClient) Delete() *ProductOrderDelete {
	mutation := newProductOrderMutation(c.config, OpDelete)
	return &ProductOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *Product_orderClient) DeleteOne(po *Product_order) *ProductOrderDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *Product_orderClient) DeleteOneID(id int) *ProductOrderDeleteOne {
	builder := c.Delete().Where(product_order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductOrderDeleteOne{builder}
}

// Query returns a query builder for Product_order.
func (c *Product_orderClient) Query() *ProductOrderQuery {
	return &ProductOrderQuery{config: c.config}
}

// Get returns a Product_order entity by its id.
func (c *Product_orderClient) Get(ctx context.Context, id int) (*Product_order, error) {
	return c.Query().Where(product_order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Product_orderClient) GetX(ctx context.Context, id int) *Product_order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *Product_orderClient) Hooks() []Hook {
	return c.hooks.Product_order
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApprovalInformations queries the approval_informations edge of a User.
func (c *UserClient) QueryApprovalInformations(u *User) *ApprovalInformationQuery {
	query := &ApprovalInformationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(approval_information.Table, approval_information.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ApprovalInformationsTable, user.ApprovalInformationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
